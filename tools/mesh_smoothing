#! /usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import meshio
import numpy
from matplotlib import pyplot as plt
import voropy


def _parse_input_arguments():
    parser = argparse.ArgumentParser(
        description='Smoothen 2D meshes.'
        )

    parser.add_argument(
        'input',
        metavar='INPUT',
        type=str,
        help='Input file'
        )

    parser.add_argument(
        'output',
        metavar='OUTPUT',
        type=str,
        help='Output file'
        )

    parser.add_argument(
        '--method', '-m',
        metavar='METHOD',
        choices=['lloyd', 'lloyd_modified'],
        help='smoothing method (default: lloyd_modified)',
        default='lloyd_modified'
        )

    parser.add_argument(
        '--tolerance', '-t',
        metavar='TOL',
        type=float,
        required=True,
        help='convergence criterium (maximum move)'
        )

    parser.add_argument(
        '--verbose', '-v',
        dest='verbose',
        action='store_true',
        default=False
        )

    parser.add_argument(
        '--output-step-filetype', '-s',
        dest='output_steps_filetype',
        default=None,
        help='write mesh after each Lloyd step'
        )

    parser.add_argument(
        '--flip-frequency', '-f',
        dest='flip_frequency',
        default=100,
        type=int,
        help='how often to do edge flipping'
        )

    return parser.parse_args()


if __name__ == '__main__':
    args = _parse_input_arguments()

    # toss away all nodes which don't belong to cells
    pts, cells, _, _, _ = meshio.read(args.input)
    cells = cells['triangle']
    uvertices, uidx = numpy.unique(cells, return_inverse=True)
    cells = uidx.reshape(cells.shape)
    pts = pts[uvertices]

    assert args.method in ['lloyd', 'lloyd_modified']
    if args.method == 'lloyd':
        fcc_type = 'boundary'
    else:  # 'lloyd_modified'
        fcc_type = 'full'

    mesh = voropy.mesh_tri.MeshTri(pts, cells, flat_cell_correction=fcc_type)

    out_mesh = voropy.mesh_tri.lloyd_smoothing(
        mesh,
        args.tolerance,
        fcc_type=fcc_type,
        flip_frequency=args.flip_frequency,
        verbose=args.verbose,
        output_filetype=args.output_steps_filetype
        )
    out_mesh.write(args.output)
